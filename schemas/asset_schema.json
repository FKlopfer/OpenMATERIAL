{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "description": "ASAM OpenMATERIAL Asset file definition.",
    "properties": {
        "metadata": {
            "type": "object",
            "description": "The key meta information about the asset, including its identity, authorship, technical specifications, and legal details.",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The display name of the asset, such as 'Car Model A' or 'Urban Scene 1'."
                },
                "description": {
                    "type": "string",
                    "description": "A concise summary of the asset's purpose or features (2-3 sentences)."
                },
                "uuid": {
                    "type": "string",
                    "description": "Universally unique identifier for the asset in 8-4-4-4-12 format, see https://en.wikipedia.org/wiki/Universally_unique_identifier. The uuid stays the same, even if version is updated.",
                    "pattern": "\\b[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\\b$"
                },
                "assetVersion": {
                    "type": "string",
                    "description": "The version number of the asset, following semantic versioning (e.g., '1.0.0').",
                    "pattern": "^\\d+\\.\\d+\\.\\d+$"
                },
                "openMaterialVersion": {
                    "type": "string",
                    "description": "The version of the OpenMATERIAL specification used, adhering to semantic versioning (e.g., '1.0.0').",
                    "pattern": "^\\d+\\.\\d+\\.\\d+$"
                },
                "copyright": {
                    "type": "string",
                    "description": "Indicates copyright details, including the year and copyright holder (e.g., 'Â© 2024 ACME Inc.')."
                },
                "license": {
                    "type": "string",
                    "description": "Describes the license for asset distribution. Use an SPDX identifier for open-source licenses (e.g., 'MIT'), or provide a URL or filename for proprietary licenses."
                },
                "author": {
                    "type": "string",
                    "description": "Lists the author(s) of the asset as a name, email, or company. Multiple authors should be comma-separated."
                },
                "modelCreationTool": {
                    "type": "string",
                    "description": "Specifies the software or tool (and version) used to create the 3D model (e.g., 'Blender 3.5')."
                },
                "creationDate": {
                    "type": "string",
                    "description": "The date and time of asset creation, formatted in ISO 8601 (e.g., '20240703T101728Z').",
                    "pattern": "^\\d{8}T\\d{6}Z$"
                },
                "modelingMethod": {
                    "type": "string",
                    "description": "Indicates how the model was created, e.g., '3D scan', 'photo-based modeling', or 'freehand design'."
                },
                "validationDescription": {
                    "type": "string",
                    "description": "Details the validation process used to compare the model geometry with real-world objects."
                },
                "assetType": {
                    "type": "string",
                    "description": "Specifies whether the asset represents an individual object ('object') or a collection of objects ('scene').",
                    "enum": [
                        "object",
                        "scene"
                    ]
                },
                "objectClass": {
                    "type": "string",
                    "description": "Classifies the object type when 'assetType' is 'object', i.e., 'vehicle', 'human', 'environment', 'other'.",
                    "enum": [
                        "vehicle",
                        "human",
                        "environment",
                        "other"
                    ]
                },
                "animated": {
                    "type": "boolean",
                    "description": "Indicates whether the 3D model contains keyframe animations."
                },
                "pbrMaterialWorkflow": {
                    "type": "string",
                    "description": "Indicates the usage of a Physically Based Rendering (PBR) material workflow as 'metallic', 'specular' or 'none'. This only applies to the internal materials of the 3D model file, not to mapped OpenMATERIAL property files.",
                    "enum": [
                        "metallic",
                        "specular",
                        "none"
                    ]
                },
                "triangleCount": {
                    "type": "integer",
                    "description": "The total number of triangles in the model. A quad polygon counts as two triangles."
                },
                "meshCount": {
                    "type": "integer",
                    "description": "The total number of meshes in the 3D geometry. A model geometry typically consists of several sub-meshes."
                },
                "textureResolutions": {
                    "type": "array",
                    "description": "Lists all the used texture resolutions in the 3D model i.e. albedo, normal or displacement textures. Possible values are '1K', '2K', '4K'.",
                    "items": {
                        "type": "string",
                        "enum": [
                            "1K",
                            "2K",
                            "4K"
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true
                },
                "normalMapFormat": {
                    "type": "string",
                    "description": "Specifies whether the 3D model utilizes normal maps as textures. If so, their format should be either 'DirectX' or 'OpenGL'. ",
                    "enum": [
                        "DirectX",
                        "OpenGL",
                        "none"
                    ]
                },
                "boundingBox": {
                    "type": "object",
                    "description": "Defines the Axis-Aligned Bounding Box (AABB) which defines the spatial boundaries of an asset in a 3D space. Example: \"boundingBox\": { \"x\": [-2.5, 2.5], \"y\": [-1.1, 1.1],\"z\": [0, 1.8]}",
                    "properties": {
                        "x": {
                            "type": "array",
                            "description": "Minimum and maximum values in meters along the x-axis.",
                            "items": {
                                "type": "number"
                            },
                            "minItems": 2,
                            "maxItems": 2
                        },
                        "y": {
                            "type": "array",
                            "description": "Minimum and maximum values in meters along the y-axis.",
                            "items": {
                                "type": "number"
                            },
                            "minItems": 2,
                            "maxItems": 2
                        },
                        "z": {
                            "type": "array",
                            "description": "Minimum and maximum values in meters along the z-axis.",
                            "items": {
                                "type": "number"
                            },
                            "minItems": 2,
                            "maxItems": 2
                        }
                    },
                    "required": [
                        "x",
                        "y",
                        "z"
                    ]
                }
            },
            "required": [
                "name",
                "description",
                "uuid",
                "assetVersion",
                "openMaterialVersion",
                "copyright",
                "license",
                "author",
                "creationDate",
                "assetType",
                "objectClass",
                "animated",
                "pbrMaterialWorkflow",
                "triangleCount",
                "meshCount",
                "textureResolutions",
                "normalMapFormat",
                "boundingBox"
            ]
        },
        "materialMappingUri": {
            "type": "string",
            "description": "Relative path to a material mapping file (.xomm). In this file, material names from the 3D model file or texture color codes from textures assigned in materialTextureAssignment are linked to OpenMATERIAL property files.",
            "pattern": ".*\\.xomm$"
        },
        "materialTextureAssignment": {
            "type": "array",
            "description": "Optional array containing material texture assignments. It links material names contained in the 3D model file to OpenMATERIAL assignment textures. In a separate material mapping file, the 'color' values in this texture are linked to OpenMATERIAL property files.",
            "items": {
                "type": "array",
                "items": [
                    {
                        "type": "string",
                        "description": "Name of the material in the 3D model file."
                    },
                    {
                        "type": "string",
                        "description": "File path to the OpenMATERIAL assignment texture. Supported texture formats are png and jpg.",
                        "pattern": "^(\\./|/)?([a-zA-Z0-9_\\-./]+)\\.(png|jpg|jpeg)$"
                    }
                ],
                "minItems": 2,
                "maxItems": 2
            }
        },
        "customProperties": {
            "type": "object",
            "description" : "Non-standardized asset properties for custom tools or tool chains.",
            "additionalProperties": {
                "type": "string"
            }
        }
    },
    "required": [
        "metadata"
    ]
}
